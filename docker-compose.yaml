version: '3'
services:
  orders:
    container_name: "orders"
    build: .
    command: bash -c "./wait_for_rabbit.sh &&
             cd services/orders &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    environment:
      - TRIES=5
      - DELAY=3
      - HOST="rabbitmq"
    restart: on-failure
    ports:
      - "8000:8000"
    depends_on:
      - rabbitmq
    volumes:
      - .:/app/orders
  shippings:
    container_name: "shippings"
    build: .
    command: bash -c "./wait_for_rabbit.sh &&
             cd services/shipping &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8001"
    environment:
      - TRIES=5
      - DELAY=3
      - HOST="rabbitmq"
    restart: on-failure
    ports:
      - "8001:8001"
    depends_on:
      - rabbitmq
    volumes:
      - .:/app/shipping
  customers:
    container_name: "customers"
    build: .
    command: bash -c "./wait_for_rabbit.sh &&
             cd services/customers &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8002"
    environment:
      - TRIES=5
      - DELAY=3
      - HOST="rabbitmq"
    restart: on-failure
    ports:
      - "8002:8002"
    depends_on:
      - rabbitmq
    volumes:
      - .:/app/customers
  rabbitmq:
      container_name: "rabbitmq"
      hostname: "rabbitmq"
      image: rabbitmq:3.8
      command: rabbitmq-server
      ports:
        - "5672:5672"
  docs:
      container_name: "docs"
      build: .
      command: bash -c "cd docs/micro-order &&
               mkdocs serve -a 0.0.0.0:9000"
      ports:
        - "9000:9000"